#!/bin/bash

# projectai.sh
# Description: Main script for project AI operations that extends agent-os functionality.
# This script initializes a project by copying templates from a GitHub repository,
# customizing them based on user input, and setting up the project structure.
# Created: July 24, 2025
# Usage: projectai <project_type>

# Exit on error
set -e

# Check if we have the required arguments
if [ "$#" -lt 1 ]; then
    echo "Error: Missing project type argument(s)"
    echo "Usage: projectai <primary_project_type> [additional_project_types...]"
    echo "Example: projectai drupal php mysql css javascript lando"
    exit 1
fi

# Set variables
PRIMARY_PROJECT_TYPE="$1"
shift # Remove first argument
ADDITIONAL_PROJECT_TYPES=("$@") # Remaining arguments as array
ALL_PROJECT_TYPES=("$PRIMARY_PROJECT_TYPE" "${ADDITIONAL_PROJECT_TYPES[@]}")
FULL_PATH="$(pwd)"
DIRECTORY=$(basename "$FULL_PATH")

# Base URL for raw GitHub content
BASE_URL="https://raw.githubusercontent.com/jdelon02/agent-os/main"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Function to prompt user for IDE selection
prompt_ide_selection() {
    echo ""
    echo "ü§ñ Which AI coding tool are you using?"
    echo ""
    echo "1) Claude Code (Anthropic's desktop app)"
    echo "   - Uses CLAUDE.md files for instructions"
    echo "   - Supports /plan-product, /create-spec, /execute-task commands"
    echo ""
    echo "2) VS Code with GitHub Copilot"
    echo "   - Uses .github/instructions/main.instructions.md files"
    echo "   - Works with GitHub Copilot and other extensions"
    echo ""
    echo "3) Cursor IDE"
    echo "   - Uses .cursorrules files for configuration"
    echo "   - Integrated AI-powered code editor"
    echo ""
    
    while true; do
        read -p "Enter your choice (1-3): " choice
        case $choice in
            1)
                IDE_TYPE="claude"
                echo "‚úì Selected: Claude Code"
                break
                ;;
            2)
                IDE_TYPE="vscode"
                echo "‚úì Selected: VS Code with GitHub Copilot"
                break
                ;;
            3)
                IDE_TYPE="cursor"
                echo "‚úì Selected: Cursor IDE"
                break
                ;;
            *)
                echo "‚ùå Invalid choice. Please enter 1, 2, or 3."
                ;;
        esac
    done
    echo ""
}

# Function to validate Agent OS directories exist
validate_agent_os_directories() {
    echo "üîç Validating Agent OS installation and project types..."
    
    # Check if ~/.agent-os directory exists
    if [ ! -d "$HOME/.agent-os" ]; then
        handle_error "Agent OS not found at ~/.agent-os. Please install Agent OS first using: curl -sSL https://raw.githubusercontent.com/jdelon02/agent-os/main/setup.sh | bash"
        return 1
    fi
    
    local valid_types=()
    local invalid_types=()
    
    # Check each project type
    for project_type in "${ALL_PROJECT_TYPES[@]}"; do
        if [ -d "$HOME/.agent-os/$project_type" ]; then
            valid_types+=("$project_type")
            echo "  ‚úì Found ~/.agent-os/$project_type"
        else
            invalid_types+=("$project_type")
            echo "  ‚ùå Missing ~/.agent-os/$project_type"
        fi
    done
    
    # Report results
    if [ ${#invalid_types[@]} -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  Warning: The following project types are not installed in Agent OS:"
        for invalid_type in "${invalid_types[@]}"; do
            echo "    - $invalid_type"
        done
        echo ""
        echo "üí° To add missing project types, run:"
        echo "    curl -sSL https://raw.githubusercontent.com/jdelon02/agent-os/main/setup.sh | bash -s -- --dirs \"$(IFS=,; echo "${invalid_types[*]}")\""
        echo ""
        
        # Ask user if they want to continue
        while true; do
            read -p "Continue with available project types only? (y/n): " continue_choice
            case $continue_choice in
                [Yy]*)
                    # Update arrays to only include valid types
                    ALL_PROJECT_TYPES=("${valid_types[@]}")
                    if [ ${#ALL_PROJECT_TYPES[@]} -eq 0 ]; then
                        handle_error "No valid project types found. Cannot continue."
                        return 1
                    fi
                    PRIMARY_PROJECT_TYPE="${ALL_PROJECT_TYPES[0]}"
                    echo "‚úì Continuing with: ${ALL_PROJECT_TYPES[*]}"
                    break
                    ;;
                [Nn]*)
                    handle_error "User chose not to continue with missing project types."
                    return 1
                    ;;
                *)
                    echo "Please answer y or n."
                    ;;
            esac
        done
    else
        echo "‚úì All project types are available in Agent OS"
    fi
    
    echo ""
    return 0
}

# Function to handle errors gracefully
handle_error() {
    local error_message="$1"
    echo "‚ùå Error: $error_message"
    return 1
}

# Function to create IDE-specific instruction file
create_instruction_file() {
    echo "üìù Creating IDE-specific instruction file..."
    
    # Generate project types list for display
    local project_types_display
    if [ ${#ALL_PROJECT_TYPES[@]} -eq 1 ]; then
        project_types_display="$PRIMARY_PROJECT_TYPE"
    else
        project_types_display="$PRIMARY_PROJECT_TYPE (+ ${ADDITIONAL_PROJECT_TYPES[*]})"
    fi
    
    # Source the appropriate IDE-specific handler
    local ide_handler_file="$SCRIPT_DIR/ide_specific/${IDE_TYPE}.sh"
    
    if [ ! -f "$ide_handler_file" ]; then
        handle_error "IDE handler file not found: $ide_handler_file"
        return 1
    fi
    
    # Source the IDE-specific handler
    source "$ide_handler_file"
    
    # Call the appropriate function based on IDE type
    case $IDE_TYPE in
        "claude")
            create_claude_instruction_file "$project_types_display"
            ;;
        "vscode")
            create_vscode_instruction_file "$project_types_display"
            ;;
        "cursor")
            create_cursor_instruction_file "$project_types_display"
            ;;
        *)
            handle_error "Unknown IDE type: $IDE_TYPE"
            return 1
            ;;
    esac
    
    return 0
}

# Function to check if curl request succeeded
check_curl() {
    local url="$1"
    local description="$2"
    if ! curl --output /dev/null --silent --head --fail "$url"; then
        handle_error "Unable to access $description at $url"
        return 1
    fi
    return 0
}

# Function to copy templates and perform replacements
copy_and_replace() {
    echo "üöÄ Fetching project templates from GitHub..."
    
    # Create temporary directory for downloads
    local temp_dir=$(mktemp -d) || {
        handle_error "Failed to create temporary directory"
        return 1
    }
    trap 'rm -rf "$temp_dir"' EXIT
    
    # Check GitHub connectivity first
    if ! check_curl "${BASE_URL}" "GitHub repository"; then
        handle_error "Cannot connect to GitHub. Please check your internet connection"
        return 1
    }
    
    # Dynamically fetch list of directories from GitHub
    echo "üìÇ Fetching template directory structure..."
    local template_dirs
    template_dirs=($(curl -s --fail "${BASE_URL}/project_templates/" 2>/dev/null | grep -o 'href="[^"]*/"' | cut -d'"' -f2 | sed 's#/$##')) || {
        handle_error "Failed to fetch template directory structure"
        return 1
    }
    
    if [ ${#template_dirs[@]} -eq 0 ]; then
        handle_error "No template directories found at ${BASE_URL}/project_templates/"
        return 1
    fi
    
    echo "‚úì Found ${#template_dirs[@]} template directories"
    local success_count=0
    local error_count=0
    
    for template_dir in "${template_dirs[@]}"; do
        echo "üìÅ Processing ${template_dir}..."
        local target_dir="$FULL_PATH/${template_dir}"
        
        # Check if directory already exists
        if [ -d "$target_dir" ]; then
            echo "  ‚ö†Ô∏è  Directory ${template_dir} already exists, skipping..."
            continue
        fi
        
        # Create directory with error checking
        if ! mkdir -p "$target_dir"; then
            echo "  ‚ö†Ô∏è  Failed to create directory ${template_dir}, skipping..."
            ((error_count++))
            continue
        fi
        
        # Attempt to fetch and process template files
        if check_curl "${BASE_URL}/project_templates/${template_dir}/" "template directory ${template_dir}"; then
            local files
            # Look for both .md files and other file types
            files=$(curl -s "${BASE_URL}/project_templates/${template_dir}/" 2>/dev/null | grep -o '"[^"]*\.\(md\|code-workspace\|json\|yaml\|yml\)"' | tr -d '"') || {
                echo "  ‚ö†Ô∏è  Failed to list files in ${template_dir}, skipping..."
                ((error_count++))
                continue
            }
            
            local file_success=0
            for template_file in $files; do
                # Handle .code-workspace file specially
                local target_file="$template_file"
                local target_path="${target_dir}/${target_file}"
                
                if [[ "$template_file" == "template.code-workspace" ]]; then
                    # Keep the file in .vscode directory but rename it
                    target_file="${DIRECTORY}.code-workspace"
                    target_path="${FULL_PATH}/.vscode/${target_file}"
                    
                    # Ensure .vscode directory exists
                    mkdir -p "${FULL_PATH}/.vscode"
                fi
                
                echo "  ‚¨áÔ∏è  Downloading ${template_file}..."
                if curl -s --fail -o "$target_path" "${BASE_URL}/project_templates/${template_dir}/${template_file}" 2>/dev/null; then
                    if [ -f "$target_path" ]; then
                        # Create replacement strings for multiple project types
                        local additional_types_str="${ADDITIONAL_PROJECT_TYPES[*]}"
                        local all_types_str="${ALL_PROJECT_TYPES[*]}"
                        
                        if sed -i '' \
                            -e "s/<PROJECTTYPE>/$PRIMARY_PROJECT_TYPE/g" \
                            -e "s/<DIRECTORY_NAME>/$DIRECTORY/g" \
                            -e "s/<ADDITIONAL_TYPES>/$additional_types_str/g" \
                            -e "s/<ALL_TYPES>/$all_types_str/g" \
                            "$target_path" 2>/dev/null; then
                            echo "    ‚úì Created and customized ${target_file}"
                            ((file_success++))
                        else
                            echo "    ‚ö†Ô∏è  Failed to customize ${target_file}"
                            rm -f "$target_path"
                        fi
                    fi
                else
                    echo "    ‚ö†Ô∏è  Failed to download ${template_file}"
                fi
            done
            
            if [ $file_success -gt 0 ]; then
                ((success_count++))
            else
                ((error_count++))
                rm -rf "$target_dir"
            fi
        else
            echo "  ‚ö†Ô∏è  Failed to access ${template_dir}, skipping..."
            rm -rf "$target_dir"
            ((error_count++))
        fi
    done
    
    echo "üîÑ Cleaning up temporary files..."
    echo "üìä Summary: $success_count directories processed successfully, $error_count failed"
    
    # Return success if at least some directories were processed
    [ $success_count -gt 0 ]
}

# Main script logic
main() {
    echo "üöÄ Project AI initialization..."
    echo "Primary Project Type: $PRIMARY_PROJECT_TYPE"
    if [ ${#ADDITIONAL_PROJECT_TYPES[@]} -gt 0 ]; then
        echo "Additional Project Types: ${ADDITIONAL_PROJECT_TYPES[*]}"
    fi
    echo "Directory Name: $DIRECTORY"
    echo "Full Path: $FULL_PATH"
    
    # Validate Agent OS directories exist
    if ! validate_agent_os_directories; then
        return 1
    fi
    
    # Prompt user for IDE selection
    prompt_ide_selection
    
    # Create IDE-specific instruction file
    if ! create_instruction_file; then
        handle_error "Failed to create instruction file"
        return 1
    fi
    
    # Execute the copy and replace function for additional templates
    if copy_and_replace; then
        echo "‚ú® Project initialization complete!"
        echo "üìÅ Created IDE-specific instruction file for $IDE_TYPE"
        echo "üéØ Referenced ${#ALL_PROJECT_TYPES[@]} project type(s): ${ALL_PROJECT_TYPES[*]}"
        echo "üìÇ Template files have been copied and customized."
        return 0
    else
        echo "‚ö†Ô∏è  Project initialization completed with some errors."
        echo "üìÅ IDE-specific instruction file was created successfully."
        echo "üéØ Referenced ${#ALL_PROJECT_TYPES[@]} project type(s): ${ALL_PROJECT_TYPES[*]}"
        echo "Please check the logs above for template copying details."
        return 1
    fi
}

# Execute main function
main "$@"
