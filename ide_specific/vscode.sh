#!/bin/bash

# VS Code IDE specific instruction file generator
# This file contains the logic for creating .github/instructions/main.instructions.md files
# and handling VS Code workspace files

# Function to backup existing file if it exists
backup_existing_file() {
    local file="$1"
    
    if [ -f "$file" ]; then
        local backup_file="${file}.old"
        echo "    üì¶ Backing up existing file: $(basename "$file") -> $(basename "$backup_file")"
        
        if mv "$file" "$backup_file"; then
            echo "    ‚úì Successfully backed up to $(basename "$backup_file")"
        else
            echo "    ‚ùå Failed to backup $(basename "$file")"
            return 1
        fi
    fi
    
    return 0
}

# Function to update .gitignore for VS Code specific symlinks
update_gitignore_for_vscode() {
    local project_dir="$1"
    local gitignore_file="${project_dir}/.gitignore"
    
    echo "üìù Updating .gitignore for VS Code symlinks..."
    
    # Define patterns to add to .gitignore for VS Code
    local ignore_patterns=(
        "# VS Code Agent OS symlinks (auto-generated by vscode.sh)"
        ".github/commands"
        ".github/chatmodes" 
        ".github/prompts"
    )
    
    # Check if .gitignore exists, create if it doesn't
    if [ ! -f "$gitignore_file" ]; then
        echo "  üìù Creating new .gitignore file"
        touch "$gitignore_file"
    fi
    
    # Check if VS Code section already exists
    if grep -q "# VS Code Agent OS symlinks" "$gitignore_file" 2>/dev/null; then
        echo "  ‚úì VS Code symlink section already exists in .gitignore"
        return 0
    fi
    
    # Add VS Code section to .gitignore
    echo "  üìù Adding VS Code symlink exclusions to .gitignore"
    echo "" >> "$gitignore_file"
    for pattern in "${ignore_patterns[@]}"; do
        echo "$pattern" >> "$gitignore_file"
    done
    
    echo "  ‚úì Updated .gitignore with ${#ignore_patterns[@]} VS Code patterns"
    return 0
}

# Function to set up VS Code IDE environment
ide_setup() {
    echo "üîß Setting up VS Code environment..."
    
    # Create .github/instructions directory
    mkdir -p "${FULL_PATH}/.github/instructions"
    
    # Create main instructions file
    local instructions_file="${FULL_PATH}/.github/instructions/main.instructions.md"
    local copilot_file="${FULL_PATH}/.github/copilot-instructions.md"
    
    # Create both files with appropriate content
    create_vscode_instructions "$instructions_file"
    create_copilot_autodetect "$copilot_file"
    
    # Configure VS Code workspace settings
    configure_vscode_workspace "${FULL_PATH}"
    
    # Create VS Code-specific symlinks for Agent OS integration
    create_vscode_symlinks "${FULL_PATH}"
    
    # Update .gitignore to exclude VS Code symlinks
    update_gitignore_for_vscode "${FULL_PATH}"
    
    return 0
}

# Function to create VS Code instructions file
create_vscode_instructions() {
    local file="$1"
    local template_url="${BASE_URL}/project_templates/.github/instructions/main.instructions.md"
    
    # Backup existing file if it exists
    backup_existing_file "$file"
    
    # Download template and apply substitutions
    if curl -sSL --fail "$template_url" -o "$file"; then
        # Apply template substitutions using exported string variables
        sed -i '' \
            -e "s/<PROJECTTYPE>/$PRIMARY_PROJECT_TYPE/g" \
            -e "s/<DIRECTORY_NAME>/$DIRECTORY/g" \
            -e "s/<ADDITIONAL_TYPES>/$ADDITIONAL_PROJECT_TYPES_STR/g" \
            -e "s/<ALL_TYPES>/$ALL_PROJECT_TYPES_STR/g" \
            "$file" 2>/dev/null
        
        echo "    ‚úì Created ${file} from template"
    else
        echo "    ‚ùå Failed to download template from ${template_url}"
        return 1
    fi
}

# Function to create Copilot auto-detect file
create_copilot_autodetect() {
    local file="$1"
    local template_url="${BASE_URL}/project_templates/.github/copilot-instructions.md"
    
    # Backup existing file if it exists
    backup_existing_file "$file"
    
    # Download template and apply substitutions
    if curl -sSL --fail "$template_url" -o "$file"; then
        # Apply template substitutions using exported string variables
        sed -i '' \
            -e "s/<PROJECTTYPE>/$PRIMARY_PROJECT_TYPE/g" \
            -e "s/<DIRECTORY_NAME>/$DIRECTORY/g" \
            -e "s/<ADDITIONAL_TYPES>/$ADDITIONAL_PROJECT_TYPES_STR/g" \
            -e "s/<ALL_TYPES>/$ALL_PROJECT_TYPES_STR/g" \
            "$file" 2>/dev/null
        
        echo "    ‚úì Created ${file} from template"
    else
        echo "    ‚ùå Failed to download template from ${template_url}"
        return 1
    fi
}

# Function to configure VS Code settings
configure_vscode_workspace() {
    local project_dir="$1"
    local settings_dir="${project_dir}/.vscode"
    local workspace_file="${settings_dir}/${DIRECTORY}.code-workspace"
    local workspace_template_url="${BASE_URL}/project_templates/.vscode/template.code-workspace"
    
    # Create .vscode directory if it doesn't exist
    mkdir -p "$settings_dir"
    
    # Backup existing workspace file if it exists
    backup_existing_file "$workspace_file"
    
    # Download and customize workspace file template (contains all settings)
    if curl -sSL --fail "$workspace_template_url" -o "$workspace_file" 2>/dev/null; then
        # Apply template substitutions using exported string variables
        sed -i '' \
            -e "s/<PROJECTTYPE>/$PRIMARY_PROJECT_TYPE/g" \
            -e "s/<DIRECTORY_NAME>/$DIRECTORY/g" \
            -e "s/<ADDITIONAL_TYPES>/$ADDITIONAL_PROJECT_TYPES_STR/g" \
            -e "s/<ALL_TYPES>/$ALL_PROJECT_TYPES_STR/g" \
            "$workspace_file" 2>/dev/null
        
        echo "    ‚úì Created .vscode/${DIRECTORY}.code-workspace (contains all VS Code configuration)"
    else
        echo "    ‚ùå Failed to download workspace template from ${workspace_template_url}"
        return 1
    fi
}

# Function to create VS Code-specific symlinks for Agent OS integration
create_vscode_symlinks() {
    local project_dir="$1"
    local github_dir="${project_dir}/.github"
    local vscode_dirs=("commands" "chatmodes" "prompts")
    
    echo "üîó Creating VS Code-specific symlinks in .github directory..."
    
    # Ensure .github directory exists
    mkdir -p "$github_dir"
    
    # Create direct symlinks to Agent OS directories
    for dir in "${vscode_dirs[@]}"; do
        local source_dir="${HOME}/.agent-os/${dir}"
        local target_dir="${github_dir}/${dir}"
        
        # Check if source directory exists in Agent OS
        if [ -d "$source_dir" ]; then
            echo "  üîó Linking .github/${dir} -> ~/.agent-os/${dir}"
            
            # Remove existing target if it exists
            if [ -e "$target_dir" ] || [ -L "$target_dir" ]; then
                rm -rf "$target_dir"
            fi
            
            # Create direct symlink to Agent OS directory
            if ln -sf "$source_dir" "$target_dir"; then
                echo "    ‚úì Successfully linked .github/${dir}"
            else
                echo "    ‚ùå Failed to link .github/${dir}"
            fi
        else
            echo "  ‚ö†Ô∏è  Warning: ~/.agent-os/${dir} not found"
        fi
    done
}

# Function to set up VS Code command integration
setup_vscode_commands() {
    local project_dir="$1"
    local commands_dir="${project_dir}/reference-docs/commands"
    
    # Check if commands directory exists
    if [ ! -d "$commands_dir" ]; then
        echo "‚ö†Ô∏è Warning: Commands directory not found at: $commands_dir"
        return 1
    fi
    
    return 0
}

# Call the main IDE setup function
ide_setup
